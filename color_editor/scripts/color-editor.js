// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['helper/colors'], function(colors) {
    var ColorEditor;
    return ColorEditor = (function() {

      function ColorEditor(element, color) {
        this.element = element;
        this.satLumDragstartHandler = __bind(this.satLumDragstartHandler, this);

        this.satLumDragendHandler = __bind(this.satLumDragendHandler, this);

        this.satLumDropHandler = __bind(this.satLumDropHandler, this);

        this.satLumDragHandler = __bind(this.satLumDragHandler, this);

        this.opacityClickHandler = __bind(this.opacityClickHandler, this);

        this.hueClickHandler = __bind(this.hueClickHandler, this);

        this.satLumClickHandler = __bind(this.satLumClickHandler, this);

        this.parseColor(color);
        $(this.element).children('.saturation-luminosity-block').click(this.satLumClickHandler);
        $(this.element).children('.hue-slider').click(this.hueClickHandler);
        $(this.element).children('.opacity-group').click(this.opacityClickHandler);
        $(this.element).children('.saturation-luminosity-block').bind('drag', this.satLumDragHandler);
        $(this.element).children('.saturation-luminosity-block').bind('dragstart', this.satLumDragstartHandler);
        $(this.element).children('.saturation-luminosity-block').bind('drop', this.satLumDropHandler);
        $(this.element).children('.saturation-luminosity-block').bind('dragend', this.satLumDragendHandler);
      }

      ColorEditor.prototype.parseColor = function(color) {
        var adjustedColorAr, colorAr, colorItem;
        if (color.match(/^#?([a-f0-9]{6}|[a-f0-9]{3})$/i)) {
          if (color.match(/^#?[a-f0-9]{3}$/i)) {
            color = color.replace('#', '');
            colorAr = color.split('');
            color = colorAr[0] + colorAr[0] + colorAr[1] + colorAr[1] + colorAr[2] + colorAr[2];
          }
          this.color = Colors.ColorFromHex(color);
        } else if (color.match(/^hsla?\((\d|,|%| |.)*\)$/i)) {
          color = color.substring(color.indexOf('(') + 1, color.indexOf(')'));
          color = color.replace(/( )/g, '');
          colorAr = color.split(',');
          adjustedColorAr = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = colorAr.length; _i < _len; _i++) {
              colorItem = colorAr[_i];
              _results.push(this.parsePercentage(colorItem));
            }
            return _results;
          }).call(this);
          this.color = Colors.ColorFromHSV(adjustedColorAr[0], adjustedColorAr[1], adjustedColorAr[2]);
        } else if (color.match(/^rgba?\((\d|,|%| |.)*\)$/i)) {
          color = color.substring(color.indexOf('(') + 1, color.indexOf(')'));
          color = color.replace(/( )/g, '');
          colorAr = color.split(',');
          adjustedColorAr = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = colorAr.length; _i < _len; _i++) {
              colorItem = colorAr[_i];
              _results.push(this.parsePercentage(colorItem));
            }
            return _results;
          }).call(this);
          this.color = Colors.ColorFromRGB(adjustedColorAr[0], adjustedColorAr[1], adjustedColorAr[2]);
        }
        return this.updateColor();
      };

      ColorEditor.prototype.parsePercentage = function(valueString) {
        output;

        var output;
        if (valueString.indexOf('%') !== -1) {
          valueString = valueString.replace('%', '');
          output = parseFloat(valueString) / 100;
        } else {
          output = parseFloat(valueString);
        }
        return output;
      };

      ColorEditor.prototype.updateColor = function() {
        var transparent;
        $(this.element).children('.saturation-luminosity-block').css('background', 'hsl(' + this.color.Hue() + ', 100%, 50%)');
        transparent = 'rgba(' + this.color.Red() + ',' + this.color.Green() + ',' + this.color.Blue() + ',0)';
        $(this.element).children('.opacity-group').children('.opacity-slider').css({
          background: "-webkit-linear-gradient(top, " + this.color.HexString() + ", " + transparent + ")"
        });
        $(this.element).children('.saturation-luminosity-block').children('.selector').css({
          left: String(this.color.Saturation() * 100) + '%',
          bottom: String(this.color.Value() * 100) + '%'
        });
        $(this.element).children('.hue-slider').children('.selector').css({
          bottom: String((this.color.Hue() / 360) * 100) + '%'
        });
        $(this.element).children('.opacity-group').children('.selector').css({
          bottom: String(this.color.Alpha() * 100) + '%'
        });
        return $(this.element).children('.color-indicator').children('.selected-color').css({
          background: 'rgba(' + this.color.Red() + ',' + this.color.Green() + ',' + this.color.Blue() + ',' + this.color.Alpha() + ')'
        });
      };

      ColorEditor.prototype.satLumClickHandler = function(e) {
        this.color.SetHSV(this.color.Hue(), e.offsetX / 150, 1 - (e.offsetY / 150));
        return this.updateColor();
      };

      ColorEditor.prototype.hueClickHandler = function(e) {
        this.color.SetHSV((1 - e.offsetY / 150) * 360, this.color.Saturation(), this.color.Value());
        return this.updateColor();
      };

      ColorEditor.prototype.opacityClickHandler = function(e) {
        this.color.SetHSVA(this.color.Hue(), this.color.Saturation(), this.color.Value(), 1 - e.offsetY / 150);
        return this.updateColor();
      };

      ColorEditor.prototype.satLumDragHandler = function(e) {
        var x, y;
        y = e.originalEvent.offsetY >= 150 ? 150 : e.originalEvent.offsetY < 0 ? 0 : e.originalEvent.offsetY;
        x = e.originalEvent.offsetX >= 150 ? 150 : e.originalEvent.offsetX < 0 ? 0 : e.originalEvent.offsetX;
        this.color.SetHSV(this.color.Hue(), x / 150, 1 - (y / 150));
        return this.updateColor();
      };

      ColorEditor.prototype.satLumDropHandler = function(e) {
        console.log(e);
        if (e.stopPropagation) {
          return e.stopPropagation();
        }
      };

      ColorEditor.prototype.satLumDragendHandler = function(e) {};

      ColorEditor.prototype.satLumDragstartHandler = function(e) {
        var dragIcon;
        dragIcon = document.createElement('img');
        dragIcon.src = '/img/transparent_bg.svg';
        console.log($(dragIcon).css({
          display: 'none'
        }));
        e.originalEvent.dataTransfer.setDragImage(dragIcon, -10, -10);
        return console.log(e.originalEvent.dataTransfer);
      };

      return ColorEditor;

    })();
  });

}).call(this);
